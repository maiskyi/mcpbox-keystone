# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  isAdmin: Boolean
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  isAdmin: BooleanFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  isAdmin: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  isAdmin: Boolean
  createdAt: DateTime
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  isAdmin: Boolean
  createdAt: DateTime
}

type Server {
  id: ID!
  title: String
  slug: String
  isOfficial: Boolean
  description: String
  overview: String
  icon: CloudinaryImage_File
  category: ServerCategory
  homepage: String
  githubUrl: String
  githubOwner: String
  githubLicense: String
  githubLanguage: String
  githubPublishedAt: DateTime
  tools: JSON
  settings: JSON
  createdAt: DateTime
}

type CloudinaryImage_File {
  id: ID
  filename: String
  originalFilename: String
  mimetype: String
  encoding: String
  publicUrl: String
  publicUrlTransformed(transformation: CloudinaryImageFormat): String
}

"""
Mirrors the formatting options [Cloudinary provides](https://cloudinary.com/documentation/image_transformation_reference).
All options are strings as they ultimately end up in a URL.
"""
input CloudinaryImageFormat {
  """ Rewrites the filename to be this pretty string. Do not include `/` or `.`
  """
  prettyName: String
  width: String
  height: String
  crop: String
  aspect_ratio: String
  gravity: String
  zoom: String
  x: String
  y: String
  format: String
  fetch_format: String
  quality: String
  radius: String
  angle: String
  effect: String
  opacity: String
  border: String
  background: String
  overlay: String
  underlay: String
  default_image: String
  delay: String
  color: String
  color_space: String
  dpr: String
  page: String
  density: String
  flags: String
  transformation: String
}

input ServerWhereUniqueInput {
  id: ID
  slug: String
  githubUrl: String
}

input ServerWhereInput {
  AND: [ServerWhereInput!]
  OR: [ServerWhereInput!]
  NOT: [ServerWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  isOfficial: BooleanFilter
  description: StringFilter
  overview: StringFilter
  category: ServerCategoryWhereInput
  homepage: StringFilter
  githubUrl: StringFilter
  githubOwner: StringFilter
  githubLicense: StringFilter
  githubLanguage: StringFilter
  githubPublishedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
}

input ServerOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  isOfficial: OrderDirection
  description: OrderDirection
  overview: OrderDirection
  homepage: OrderDirection
  githubUrl: OrderDirection
  githubOwner: OrderDirection
  githubLicense: OrderDirection
  githubLanguage: OrderDirection
  githubPublishedAt: OrderDirection
  createdAt: OrderDirection
}

input ServerUpdateInput {
  title: String
  slug: String
  isOfficial: Boolean
  description: String
  overview: String
  icon: Upload
  category: ServerCategoryRelateToOneForUpdateInput
  homepage: String
  githubUrl: String
  githubOwner: String
  githubLicense: String
  githubLanguage: String
  githubPublishedAt: DateTime
  tools: JSON
  settings: JSON
  createdAt: DateTime
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input ServerCategoryRelateToOneForUpdateInput {
  create: ServerCategoryCreateInput
  connect: ServerCategoryWhereUniqueInput
  disconnect: Boolean
}

input ServerUpdateArgs {
  where: ServerWhereUniqueInput!
  data: ServerUpdateInput!
}

input ServerCreateInput {
  title: String
  slug: String
  isOfficial: Boolean
  description: String
  overview: String
  icon: Upload
  category: ServerCategoryRelateToOneForCreateInput
  homepage: String
  githubUrl: String
  githubOwner: String
  githubLicense: String
  githubLanguage: String
  githubPublishedAt: DateTime
  tools: JSON
  settings: JSON
  createdAt: DateTime
}

input ServerCategoryRelateToOneForCreateInput {
  create: ServerCategoryCreateInput
  connect: ServerCategoryWhereUniqueInput
}

type ServerCategory {
  id: ID!
  title: String
  slug: String
  icon: CloudinaryImage_File
  isDefault: Boolean
  createdAt: DateTime
}

input ServerCategoryWhereUniqueInput {
  id: ID
  title: String
  slug: String
}

input ServerCategoryWhereInput {
  AND: [ServerCategoryWhereInput!]
  OR: [ServerCategoryWhereInput!]
  NOT: [ServerCategoryWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  isDefault: BooleanFilter
  createdAt: DateTimeNullableFilter
}

input ServerCategoryOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  isDefault: OrderDirection
  createdAt: OrderDirection
}

input ServerCategoryUpdateInput {
  title: String
  slug: String
  icon: Upload
  isDefault: Boolean
  createdAt: DateTime
}

input ServerCategoryUpdateArgs {
  where: ServerCategoryWhereUniqueInput!
  data: ServerCategoryUpdateInput!
}

input ServerCategoryCreateInput {
  title: String
  slug: String
  icon: Upload
  isDefault: Boolean
  createdAt: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createServer(data: ServerCreateInput!): Server
  createServers(data: [ServerCreateInput!]!): [Server]
  updateServer(where: ServerWhereUniqueInput!, data: ServerUpdateInput!): Server
  updateServers(data: [ServerUpdateArgs!]!): [Server]
  deleteServer(where: ServerWhereUniqueInput!): Server
  deleteServers(where: [ServerWhereUniqueInput!]!): [Server]
  createServerCategory(data: ServerCategoryCreateInput!): ServerCategory
  createServerCategories(data: [ServerCategoryCreateInput!]!): [ServerCategory]
  updateServerCategory(where: ServerCategoryWhereUniqueInput!, data: ServerCategoryUpdateInput!): ServerCategory
  updateServerCategories(data: [ServerCategoryUpdateArgs!]!): [ServerCategory]
  deleteServerCategory(where: ServerCategoryWhereUniqueInput!): ServerCategory
  deleteServerCategories(where: [ServerCategoryWhereUniqueInput!]!): [ServerCategory]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  server(where: ServerWhereUniqueInput!): Server
  servers(where: ServerWhereInput! = {}, orderBy: [ServerOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ServerWhereUniqueInput): [Server!]
  serversCount(where: ServerWhereInput! = {}): Int
  serverCategory(where: ServerCategoryWhereUniqueInput!): ServerCategory
  serverCategories(where: ServerCategoryWhereInput! = {}, orderBy: [ServerCategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ServerCategoryWhereUniqueInput): [ServerCategory!]
  serverCategoriesCount(where: ServerCategoryWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialColumns: [String!]!
  initialSearchFields: [String!]!
  initialSort: KeystoneAdminUISort
  isSingleton: Boolean!
  hideCreate: Boolean!
  hideDelete: Boolean!
  isHidden: Boolean!
  itemQueryName: String!
  listQueryName: String!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
